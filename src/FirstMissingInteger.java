package com.il.training.interviewbit.arrays.java;

import java.util.Arrays;
import java.util.List;

/**
 * Created by cesaregb on 6/9/17.
 */

//https://www.interviewbit.com/problems/first-missing-integer/
public class FirstMissingInteger {

  public static void main(String[] args) {
//		System.out.println(firstMissingPositive(Arrays.asList(1,2,3,4,5)));
//		System.out.println(firstMissingPositive(Arrays.asList(1,2,-1,4,5)));
//		System.out.println(firstMissingPositive(Arrays.asList(2,2,3,4,5)));
//		System.out.println(firstMissingPositive(Arrays.asList(417, 929, 845, 462, 675, 175, 73, 867, 14, 201, 777, 407, 80, 882, 785, 563, 209, 261, 776, 362, 730, 74, 649, 465, 353, 801, 503, 154, 998, 286, 520, 692, 68, 805, 835, 210, 819, 341, 564, 215, 984, 643, 381, 793, 726, 213, 866, 706, 97, 538, 308, 797, 883, 59, 328, 743, 694, 607, 729, 821, 32, 672, 130, 13, 76, 724, 384, 444, 884, 192, 917, 75, 551, 96, 418, 840, 235, 433, 290, 954, 549, 950, 21, 711, 781, 132, 296, 44, 439, 164, 401, 505, 923, 136, 317, 548, 787, 224, 23, 185, 6, 350, 822, 457, 489, 133, 31, 830, 386, 671, 999, 255, 222, 944, 952, 637, 523, 494, 916, 95, 734, 908, 90, 541, 470, 941, 876, 264, 880, 761, 535, 738, 128, 772, 39, 553, 656, 603, 868, 292, 117, 966, 259, 619, 836, 818, 493, 592, 380, 500, 599, 839, 268, 67, 591, 126, 773, 635, 800, 842, 536, 668, 896, 260, 664, 506, 280, 435, 618, 398, 533, 647, 373, 713, 745, 478, 129, 844, 640, 886, 972, 62, 636, 79, 600, 263, 52, 719, 665, 376, 351, 623, 276, 66, 316, 813, 663, 831, 160, 237, 567, 928, 543, 508, 638, 487, 234, 997, 307, 480, 620, 890, 216, 147, 271, 989, 872, 994, 488, 291, 331, 8, 769, 481, 924, 166, 89, 824, -4, 590, 416, 17, 814, 728, 18, 673, 662, 410, 727, 667, 631, 660, 625, 683, 33, 436, 930, 91, 141, 948, 138, 113, 253, 56, 432, 744, 302, 211, 262, 968, 945, 396, 240, 594, 684, 958, 343, 879, 155, 395, 288, 550, 482, 557, 826, 598, 795, 914, 892, 690, 964, 981, 150, 179, 515, 205, 265, 823, 799, 190, 236, 24, 498, 229, 420, 753, 936, 191, 366, 935, 434, 311, 920, 167, 817, 220, 219, 741, -2, 674, 330, 909, 162, 443, 412, 974, 294, 864, 971, 760, 225, 681, 689, 608, 931, 427, 687, 466, 894, 303, 390, 242, 339, 252, 20, 218, 499, 232, 184, 490, 4, 957, 597, 477, 354, 677, 691, 25, 580, 897, 542, 186, 359, 346, 409, 655, 979, 853, 411, 344, 358, 559, 765, 383, 484, 181, 82, 514, 582, 593, 77, 228, 921, 348, 453, 274, 449, 106, 657, 783, 782, 811, 333, 305, 784, 581, 746, 858, 249, 479, 652, 270, 429, 614, 903, 102, 378, 575, 119, 196, 12, 990, 356, 277, 169, 70, 518, 282, 676, 137, 622, 616, 357, 913, 161, 3, 589, 327)));
//		System.out.println(firstMissingPositive(Arrays.asList(1)));
//		System.out.println(firstMissingPositive(Arrays.asList(110, 483, 137, 881, 946, 231, 378, 449, 68, 518, 476, 898, 685, 384, 839, 553, 304, 689, 467, 292, 414, 679, 301, 30, 457, 300, 93, 427, 619, 439, 4, 348, 714, 966, 142, 538, 484, 827, 237, 447, 442, 133, 771, 578, 190, 782, 182, 23, 192, 177, 164, 276, 273, 45, 624, 12, 354, 938, 472, 899, 42, 612, 813, 386, 380, 63, 136, 589, 334, 349, 757, 999, 526, 156, 803, 991, 961, 535, 297, 336, 409, 59, 558, 678, 755, 720, 88, 906, 571, 770, 673, 581, 399, 868, 446, 123, 707, 643, 548, 226, 854, 830, 423, 621, 14, 767, 801, 651, 932, 492, 462, 321, 250, 591, 208, 862, 413, 418, 724, 746, 388, 925, 882, 808, 543, 171, 737, 994, 283, 950, 528, 443, 853, 671, 699, 19, 344, 365, 134, 818, 531, 48, 464, 124, 377, 379, 792, 387, 11, 796, 159, 65, 842, 109, 631, 600, 987, -3, 263, 28, 833, 779, 100, 73, 790, 179, 889, 557, 887, 455, 502, 511, 907, 686, 713, 864, 271, 372, 850, 534, 347, 649, 21, 169, 712, 435, 1, 222, 509, 866, 628, 604, 885, 385, 896, 498, 964, 598, 508, 575, 893, 294, 520, 918, 729, 789, 772, 660, 87, 569, 677, 602, 962, 217, 69, 648, 72, 331, 749, 637, 180, 489, 733, 481, 393, 40, 274, 320, 113, 930, 633, 516, 878, 835, 754, 126, 15, 593, 338, 494, 972, 603, 34, 739, 947, 592, 886, 583, 127, 172, 675, 975, 232, 394, 763, 92, 512, 616, 983, 856, 955, 166, 157, 608, 218, 56, 66, 696, 310, 933, 185, 563, 647, 960, 323, 727, 471, 397, 367, 582, 223, 369, 759, 706, 35, 588, 478, 317, 564, 768, 904, 149, 202, 165, 695, 985, 731, 486, 312, 561, 466, 197, 245, 980, 979, 620, 774, 438, 193, 146, 653, 468, 963, 485, 178, 29, 434, 272, 296, 700, 549, 181, 586, 595, 410, 108, 91, 640, 175, 750, 490, 20, 101, 879, 74, 798, 910, 611, 187, 286, 997, 138, 488, 901, 154, 267, 403, 122, 572, 787, 942, 391, 525, 176, 383, 1000, 458, 24, 780, 691, 738, 151, 170, 351, 441, 776, 453, 590, 545, 139, 859, 461, 970, 491, 785, 969, 670, 570, 219, 99, 353, 723, 470, 716, 249, 115, 680, 501, 128, 851, 9, 120, 256, 820, 114, 416, 329)));
    System.out.println(firstMissingPositive(Arrays.asList(463, 127, 436, 72, 79, 301, 613, 898, 675, 960, 832, 486, 453, 274, 133, 721, 750, 538, 545, 112, 414, 817, 885, 812, 906, 577, 544, 101, 165, 45, 489, 503, 479, 293, 234, 427, 347, 851, 316, 827, 209, 578, 255, 56, 608, 914, 156, 537, 870, 567, 284, 240, 292, 111, 590, 713, 110, 768, 598, 879, 980, 660, 46, 320, 410, 869, 154, 970, 836, 423, 413, 501, 782, 403, 561, 117, 624, 638, 67, 646, 917, 379, 344, 543, 978, 506, 936, 947, 645, 633, 375, 706, 531, 470, 551, 632, 536, 642, 573, 705, 823, 897, 26, 476, 139, 496, 628, 91, 725, 570, 701, 244, 935, 126, 2, 560, 726, 20, 680, 7, 888, 183, 80, 804, 729, 583, 728, 515, 644, 774, 856, 192, 386, 25, 57, 471, 482, 174, 627, 757, 714, 203, 206, 847, 245, 336, 989, 326, 607, 95, 69, 71, 54, 975, 366, 591, 185, 964, 848, 84, 819, 737, 687, 215, 904, 651, 289, 134, 232, 341, 932, 64, 483, 128, 901, 808, 896, 941, 530, 195, 865, 903, 472, 508, 42, 971, 53, 86, 689, 925, 685, 934, 549, 841, 169, 317, 826, 600, 950, 90, 495, 219, 674, 814, 359, 556, 269, 187, 517, 541, 558, 8, 744, 958, 332, 163, 862, 218, 376, 23, 321, 346, 534, 864, 157, 285, 318, 200, 595, 810, 43, 32, 368, 753, 670, 887, 238, 1000, 513, 979, 499, 708, 473, 584, 981, 106, 695, 868, 881, 610, 273, 239, 190, 281, 373, 247, 364, 396, 837, 521, 871, 528, 617, 123, 894, 965, 108, 976, 451, 454, 673, 910, 681, 300, 702, 703, 307, 196, 535, 407, 763, 966, 945, 944, 65, 752, 776, 973, 554, 3, 998, 559, 35, -3, 147, 395, 761, 442, 586, 899, 191, 990, 606, 771, 393, 649, 987, 593, 877, 527, 201, 259, 150, 683, 263, 330, 21, 105, 406, 233, 303, 254, 33, 417, 497, 622, 286, 9, 967, 603, 78, 118, 304, 235, 985, 657, 741, 425, 995, 592, 844, 933, 99, 524, 418, 623, 529, 797, 342, 217, 580, 691, 772, 13, 390, 666, 87, 448, 505, 907, 765, 802, 484, 419, 669, 780, 96, 585, 796, 686, 302, 858, 388, 438, 893, 735, 360, 913, 902, 279, 720, 408, 287, 996, 507, 28, 416, 731, 928, 977, 547, 739, 788, 168, 331, 146, 664, 619, 723, 732, 102, 14, 424, 216, 575, 568, 93, 992, 272, 160, 389, 47, 647, 189, 988, 343, 991, 940, 358, 181, 611, 229, 265, 892, 422, 211, 443, 747, 736, 266, 652, 351, 612, 514, 876, 637, 329, 474, 68, 730, 825, 676, 778, 208, 956, 270, 398, 968, 268, 594, 288, 385, 866, 197, 428, 441, 672, 158, 618, 811, 363, 905, 462, 241, 226, 450, 309, 170, 822, 727, 333, 335, 92, 540, 202, 205, 115, 153, 569, 142, 290, 943, 394, 248, 228, 643, 415, 784, 579, 571, 291, 177, 711, 149, 130, 921, 922, 439, 951, 338, 769, 283, 308, 857, 253, 833, 490, 824, 518, 525, 131, 924, 27, 830, 915, 237, 694, 581, 609, 19, 152, 566, 465, 140, 81, 313, 969, 327, 6, 526, 135, 186, 656, 662, 155, 874, 648, 488, 199, 677, 952, 614, 722, 369, 682, 129, 478, 433, 809, 891, 717, 550, 748, 0, 323, 469, 151, 41, 299, 193, 487, 931, 634, 400, 799, 884, 405, 480, 76, 805, 926, 426, 312, 821, 178, 789, 449, 697, 853, 295, 48, 224, 397, 447, 946, 49, 382, 236, 867, 485, 349, 231, 227, 39, 38, 882, 210, 457, 222, 852, 665, 138, 455, 114, 204, 498, 511, 230, 509, 278, 365, 831, 412, 5, 816, 1, 324, 194, 464, 141, 420, 795, 839, 641, 10, 777, 15, 519, 829, 961, 109, 31, -5, 63, 421, 77, 430, 542, 452, 256, 355, 357, 704, 434, 459, 262, 132, 863, 468, 929, 716, 564, 890, 616, 855, 845, 548, 143, 145, 707, 787, 948, 11, 872, 61, 909, 762, 639, 786, 350, 136, 972, 75, 605, 354, 339, 305, 754, 755, 658, 40, 319, 620, 679, 984, 252, 477, 432, 684, 766, 280, 912, 949, 328, 834, 522, 310, 920, 546, 770, 214, 962, 678, 760, 916, -4, 401, 12, 957, 806, 791, 261, 277, 372, 17, 85, 982, 97, 125, 698, 399, 381, 655, 315, 182, 923, 886, 440, 223, 387, 173, 663, 588, 122, 113, 98, 803, 353, 668, 311, 587, 444, 636, 939, 429, 790, 718, 938, 738, 50, 362, 435, 813, 908, 650, 843, 959, 460, 849, 167, 384, 348, 467, 337, 356, 724, 516, 121, 880, 667, 779, 709, 986, 751, 51, 781, 659, 794, 653, 635, 553, 60, 322, 352, 696, 392, 250, 119, 431, 746, 164, 107, 563, 461, 532, 712, 391, 840, 380, 801, 574, 900, 576, 640, 378, 963, 601, 267, 207, 370, 225, 260, 500, 883, 159, 58, 166, 745, 179, 251, 271, 294, 257, 631, 895, 604, 828, 953, 520, 16, 818, 539, 491, 120, 875, 89, 692, 458, 552, 599, 861, 492, 74, 699, 55, 475, 345, 24, 700, 889, 937, 785, 758, 983)));
  }


  public static int firstMissingPositive(List<Integer> list) {
    for (int i = 0; i < list.size(); i++) {
      if (list.get(i) > 0) {
        markElementsIterative(list, list.get(i));
      }
    }

    for (int i = 0; i < list.size(); i++) {
      if (list.get(i) != (i + 1)) {
        return i + 1;
      }
    }

    return list.size() + 1;
  }


  private static void markElements(List<Integer> list, int i) {
    i--;
    int val = i + 1;
    if (i > 0 && i < (list.size() - 1) && list.get(i) != val) {
      int itm = list.get(i);
      list.set(i, val);
      if (itm > 0) {
        markElements(list, itm);
      }
    }
  }

  private static void markElementsIterative(List<Integer> list, int i) {
    while (i > 0 && i < list.size() && list.get(i - 1) != i) {
      int tmp = list.get(i - 1);
      list.set(i - 1, i);
      i = tmp;
    }
  }
}
