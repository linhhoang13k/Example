package me.cwuyi;

import java.util.*;

/**
 * Created by xyy on 2017/6/27.
 */
public class _0627 {

    public static void main(String[] args) {
        long s = System.currentTimeMillis();
//        int[] array = new int[]{1,2,3,4,5,6};
//        rotate(array, 3);
//        System.out.println(Arrays.toString(array));

//        String str = "CCTATTTAAGGGAATCGCGGTCAACTATGTTGCCAGAATATAGGATGGAAAGCAGACTCGCCGGCAGACGCTCTGAGATTCTCTGTAATCGATCTGAGTTCATAAGCGACTCATAGACACCGTAGGCCATGACGGGGGAGGTGCGGGTAGTCGCAAAAAAAATGTGGCCTGCGTTCCGAAAGTTAATCGTAAGGACCTCTTAAGGTCAATTTCCGTAGTGATATAACGGACGCGACTTTAGGATACTATATTGCCCCACATTAACTCCCTTCCCTCTGCAATCGGCATGTGCTCCCGAGGTATACTGTCTTCGGAACAAACTGAATCCATACACCTCTTATCGACCCAGCACCTCCGAAAAGGAAATCGACGCCCCAACATTATACGCCTAGACAATTGCAACATAGAGCGAGACGTAGCGATCCAAACGAGCTAACAGCTCGAGATAACGAGTGCCTACGGCGATCGATGTCAAACGTCCAAGTGCATACTCGCTAGGACATTGGCTCATCAGGACTCAACTTAGTAGCTGATGCTGCTAGTTTAACGTCTTGTAATCAATATAGAGCATTGCACGGACACCAGCGCTCAACCTGGAGATGCCTTGTCTCGGAAAAACTGCATTCTGTAATAACCACGGGGTGCCACATTCCGGAACCGGGATCCGTCAAGCATGCCTTTCCGATTCATCGCGGGGTACCTCTGGCTTCCTTGAACCTGGGTGGGTATAAAATAACCGGTTTTAAGTGGCTCGACAGAGCGGGAAGCAGGCGCTATCATCAGGTTTTTACGGATTTATAGAGACCTCTTGTGCAGCAATACCTCTTTAATCCAATGTGGGCGCCCCCTTCATAGGGTCACGTCAGCATGATTCGTCGGGCCGAGGGACATGACTGACGACCGTTGGCAATACCCCGACCTCTAAAATTGTCCAACAGTGTGGTAGGTTATCCTGGTGACGCGGTATGACGGTCGATGCGAGCGTGTAGAAAGATGACGAGAGAGTCATCTCACAACATTGCGTGCTGTTTGGATCATACACCCCTGTGGAGGGCTTACCAGAAAGTGGACGCAGAAAGCCACCAAAAGTGTCATGCCAGATACCTGGCCTCCTTCGCCGCCGCGACTGAAGACCTTCCTTTAATTCCGTTATCCTACTTACGACCGAGAGTCAGATCTGTCAGTAAAGATCGGTCTGTTGCTTTCCACGGACTGTGAAGAATCCGCTGTTCTAACCAGCCAGCCCATTATACGGATCGATTTTGAAGTAACCTAGTAGGCGAATCAGCGGCCGGGCCTGATGCTAGACTCCCTAGACAATTTCCTCTCCACGGAAGGTTCCTAATCCCTGGGAATTTGGCTTATACGGGCCTTGGACACTGTTAAACTTCAGAGTGATAATTTAATGGCGAAGCTCTACGCCAGCGACCGCCGAAGCTCGCACCTTTAGCCCCCCTGAGTGAAGAACACTCGGGAATCTGCTCTCCTTGCAACCAAGCAACGGCGGGGTAGATATGGTGGGTTTCATGACGGCCCGGGAAGCTCTGGTCATAGCAATACTTGGGTAGCTGTGATGAGGGTCCAAAACTTTTTGGGCCAAGGTTCGGACGACACCGTCCGATCGACTGCCTAACTACCTGTTCACCCCATCGATAGAGTACAGTCGAGGCCCCGCCCGACCCATACGTCAAGACAGTGACAATAGGTGCTTACGAGTTTCTATAATAAATTGTCGGGACGATGTCTGCCCGCCTACCTGAGTGCGTGCCCGATATGGGGCTTGCGGAAAACTATGAAATATTAGTATTGCCCGGGGGACTCAGTCGAGTATTTGTGGAGACTCCCATTGCACTACTACAGCACCATATTAAGCTTACTCAGATACGTTAGAACAATAGGGGATCCACTTAAAACATTACAGATCCCAATCGGTCTCCTTGTTAAGGAAAAGCGTTAACAGGTGTGGTGGCAGTTATATTTGTAATAGACTTATAATAGGGTATTCCAAGTTTATTGTGGATAACGTCTCAAACCTGTTCCACACCACGAGTGTGGGCAATGAGATCCTATTGGCACGTCGTTATAGTCTCAGTGCCTGAAGACACCTGAAAGCAGGCGCTGTGACGTGTACCCAGTGCCCTCTGCAACCGGGAACTAGGGTTACAGAGGGGAAACAAAAATGATCGCACGCTTTAATCCAATACCGTTTCCCGTCTCCCAAGGTGAGACACTCCGGGGTATAAGTCCAGCCTCTTGTACGGTCACGATTAGGCGAAAATCTACTGTCTACCTTCGGTGTGCATTGTCTTAGCGTCTTATCCAGAGAGGAATGGCTTTCGTCGTCGTCGCTAGTTTCGCTCGCTTGAGGTATAGTTAATAGCAAGACTACGAGTCCACTGCTTCATGTCTAATTCATCGGCAGCCCTGTTTGGATTGGAGCGTAGCTAGGACCCCCGAACCAGCCTTAACTATGAACGTTTGTCTTCAAATCTGGGCGCACGTACTTCGTAGGCTGGATATGCAGAATCTCGCCGTCGTGACGACGATCCGTTGTAGACGGCACAGCGTCTCTGACCGGCTTGAACTAATGCTGACAATTCTGACATAAGGTCTACGCATCCAGAAAGTGTAATGCATGTATGTATGCAGCCAAACGATAGTAGAGCCCTATCTCGCTTGAGAGGCACTTCCCTGTATGCAAATACCGATGTTTCTCCGCTTCATGTACTAAAACCCTGTGACCGACTAGTTGCACCTACGATTGTATGACACGACGGCCTTAGAGGCAGCAACGCGTGGTAGGCCGTTATGCGAGGAATTCTACTACAGTCGGGAGCCGCAGCGGAAGCAATTTTTTTACTCACGTTCCAGCATGCTGCAAACGGAAGCTGACACGGAGTCAATCGGGTAAATTTTGAGCAAATAAATCGCGACAACTAGTCCCGACTACGCTTTCGACACTGTCCGGCAGATTCCGTGCATCAATTAAACGTCATCAATCAATTACTGGCACGACTGTAGACGGGTGTACTCTTTTATAGACTCAGCAGTAGGACCTATGTGGAGCGGTCTACACATTGACGCAAGACACAAGAACTAGCGCGGATTGTTTGATTCGGTGACCTCTGAGGGTCGCTAAGCGACACCACAATGCGTTAGTGCTAACGTAAGAGAGCTCGATTGCTATATAGATGTCGGTATTCTTCAATGCATTTGCTTACTAGCAGCGTCGGATACTCTTGGCCGGGACCTTCTTATTAGTCAATTACAGAAACAGTTGAAAGCCCCACCAGTTGCATATACTACTGCCTCCATTGTTGATGACCTCAACTTGCCTACCAGGATTGGAGCACCGATGTTATTTCCTCCGAGGTATAACCGAGCGTCATAACTTGGATGTATCCAGACTCGCTTATCCCCTCGCTGAGCATATCCTAGTCTGGATGACTTCAGAGAGCCTTTCTGGTCCGTAATATCCCAGTAGACTGGAGTTGTAGCAAATCGACCCTTGGGTGACTGCCTCACCCTGAAGTGATGTCTCTTCTTTACCATGCAGGCACTGGTCTAGCCGCCGAGTATCTTCTGATCCTTCTAAGGGCTTATTCGAAACAGCTTAACAAATGACAGGCTGTGATGATATATTACGTTGACGCTACGGGGACAGCGCCTATGTCGGCCACTAGGGCTTCATCCGTTACTCAGGGTCAAATGGGGATTTCATATTGCGGGATCGATTGAAGATAGCATCACACGTCTCCCAAGATACGTCCCACTTTGGTTTTGGTCACTCCTTATTCCGCGACGGTAGTCCCGCGCTGTTGCAAACTCGTTTGAAGACGCCTAGTCAAGATTCACTTCGCGGATCCGGCATCTTCGAATGGTTGGGATCCAGACGAGCGTGGGCGTACTGCTTACGAGAACGACTCGGCAGTGTTAGAGTGTTATCTGAAGGAGATGCTAGTAACATAATATACAAATCTTTATGTTAGTAGACTGCACAAGTCAATATGGATACATAGGTCCATGGAAGAATGTTCACGCGTTACTTGTGTCTCGCCACGCGAGTGCATCTCCATAGAGCCTTCCTGTATCGTCACTTTCTCTCGATGGTCAGCGTTTCAATAATTCGCGAGCAACAACGTCGATCTCCGGGATATACGATCAGCCCAGAGTACAAGACCCGATATGCACGGCATGCAATATCCAGAGTCGGGCATACTTTATTGGACTGGTAAGTCTCTCCTGTCCACGCTGACTACAACTGAAGTAGTGTGACCTGACTGGCGCCTTCTACCACCCATGTCTCCAGCAATTGTCGCATCATACAGGTTCCCAGCGTAGCGTCGCCCCTTTGGCGCTTTCCTGCGGTATCGATATAATGAAATTTTCACCAACGTTGCGCTTATTCGCAAGGTGGCGAGATTGTATTATGCCACACAGCCTCCTAGAATATCCTAAGGCAGAGTTCGGTGACTTTTGCCGCTTTAGGCAGGACAGAGCTGTCCTTATCTTGGGACAGCACGTGCTTCGATATACTGCCCGCGCTTTCTCTGGGGACGCTTTAAGGTCTTTTTGCTGCGATTGCGCTATCCGAGCCACTGTATCTTATACCGACGTATCTCGGCCTCGTTACATAGAAAATACTGTCAGCGCTTGTAGCGAGACCACGCGATAGTGACCGGAGTTGGTTCCTCCGTCCTTTTTGTATTCCCCGTTGCGACTGATTCACGTGACCACATAGTCATAAGACACTGAAACAAAGCTTACTTTGGCGAGTAGGATGTGTTAATAACTTCTGGCAGCACATAGAATTGGTCCGTGGTCCTCCTTTGCGGCCACTACTGAACGTACCAATGAGTACGTATTGACCTCTTACTGAGTGTAGTAAGGGAGCATCAATCGGTCTCCGGGTTTTTGATTCATGAGTCATGCATCAGTGGTTCATCCCTTGCGTGTTATTCTCTTGATACGGTTGACTAAGCAATGAGTTAGTCGAGCTA";
//
//        System.out.println(findRepeatedDnaSequences(str));
//        System.out.println(System.currentTimeMillis() - s);
//
//        s = System.currentTimeMillis();
//
//        System.out.println(findRepeatedDnaSequencesTLE(str));

//        System.out.println(reverseBits(43261596));
        System.out.println(hammingWeight(11));


        System.out.println(System.currentTimeMillis() - s);

    }

    // TLE
    public static List<String> findRepeatedDnaSequencesTLE(String s) {

        int[][] lcs = new int[s.length()][s.length()];
        Set<String> resSet = new HashSet<>();

        for (int i = 0; i < s.length(); i++) {
            for (int j = 0; j < s.length(); j++) {
                if (s.charAt(i) == s.charAt(j)) {
                    if (i == 0 || j == 0) {
                        lcs[i][j] = 1;
                    } else {
                        lcs[i][j] = lcs[i-1][j-1] + 1;
                    }

                    if (i == j) continue;
                    if (lcs[i][j] >= 10) {
                        resSet.add(s.substring(i+1-10, i+1));
                    }
                }
            }
        }
        return new ArrayList<>(resSet);
    }

    public static List<String> findRepeatedDnaSequences(String s) {
        Set<String> set = new HashSet<>();
        Map<Integer, Integer> map = new HashMap<>();

        int value = 0;

        for (int i = 0; i < s.length(); i++) {
            value = (value << 3 | (s.charAt(i) & 0x7)) & 0x3fffffff;
            if (i < 9) continue;
            if (map.containsKey(value)) {
                set.add(s.substring(i+1-10, i+1));
            } else {
                map.put(value, 1);
            }
        }

        return new ArrayList<>(set);
    }

    public static void rotateBAD(int[] nums, int k) {
        int offset = k % nums.length;
        int nowIndex = 0;
        int nextValue = 0;
        int temp = nums[0];

        do {
            int nextIndex = (nowIndex + offset) % nums.length;
            nextValue = nums[nextIndex];
            nums[nextIndex] = temp;

            temp = nextValue;
            nowIndex = nextIndex;
        } while (nowIndex != 0);
    }

    public void rotate(int[] nums, int k) {
        int offset = k % nums.length;
        reverse(nums, 0, nums.length-1);
        reverse(nums, 0, offset-1);
        reverse(nums, offset, nums.length-1);
    }

    private void reverse(int[] nums, int start, int end) {
        while (start < end) {
            int temp = nums[start];
            nums[start] = nums[end];
            nums[end] = temp;
            start++;end--;
        }
    }


    // you need treat n as an unsigned value
    public static int reverseBits(int n) {
        int res = 0;
        for (int i = 31; i >= 0; i--) {
            res = res | (((n >> i) & 1) << (31-i));
        }

        return res;
    }

    // you need to treat n as an unsigned value
    public static int hammingWeight(int n) {
        int res = 0;

        for(int i = 31; i >= 0; i--) {
            if (((n >> i) & 1) == 1) {
                res++;
            }
        }
        return res;
    }


}
