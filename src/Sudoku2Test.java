package com.ab.cf.test;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import com.ab.cf.array.Sudoku2;

public class Sudoku2Test {

	@Before
	public void setUp() throws Exception {
	}

	@Test
	public void testSudoku2True() {
		char[][] grid = { { '.', '.', '.', '1', '4', '.', '.', '2', '.' },
				{ '.', '.', '6', '.', '.', '.', '.', '.', '.' }, { '.', '.', '.', '.', '.', '.', '.', '.', '.' },
				{ '.', '.', '1', '.', '.', '.', '.', '.', '.' }, { '.', '6', '7', '.', '.', '.', '.', '.', '9' },
				{ '.', '.', '.', '.', '.', '.', '8', '1', '.' }, { '.', '3', '.', '.', '.', '.', '.', '.', '6' },
				{ '.', '.', '.', '.', '.', '7', '.', '.', '.' }, { '.', '.', '.', '5', '.', '.', '.', '7', '.' } };

		Sudoku2 s2 = new Sudoku2();
		Assert.assertTrue(s2.sudoku2(grid));

	}

	@Test
	public void testSudoku3False() {
		char[][] grid = { { '.', '.', '.', '.', '2', '.', '.', '9', '.' },
				{ '.', '.', '.', '.', '6', '.', '.', '.', '.' }, { '7', '1', '.', '.', '7', '5', '.', '.', '.' },
				{ '.', '7', '.', '.', '.', '.', '.', '.', '.' }, { '.', '.', '.', '.', '8', '3', '.', '.', '.' },
				{ '.', '.', '8', '.', '.', '7', '.', '6', '.' }, { '.', '.', '.', '.', '.', '2', '.', '.', '.' },
				{ '.', '1', '.', '2', '.', '.', '.', '.', '.' }, { '.', '2', '.', '.', '3', '.', '.', '.', '.' } };

		Sudoku2 s2 = new Sudoku2();
		Assert.assertFalse(s2.sudoku2(grid));

	}

	@Test
	public void testSudoku3SubGrid() {
		char[][] grid = { { '.', '.', '.', '.', '2', '.', '.', '9', '.' },
				{ '.', '.', '.', '.', '6', '.', '.', '.', '.' }, { '7', '1', '.', '.', '7', '5', '.', '.', '.' },
				{ '.', '7', '.', '.', '.', '.', '.', '.', '.' }, { '.', '.', '.', '.', '8', '3', '.', '.', '.' },
				{ '.', '.', '8', '.', '.', '7', '.', '6', '.' }, { '.', '.', '.', '.', '.', '2', '.', '.', '.' },
				{ '.', '1', '.', '2', '.', '.', '.', '.', '.' }, { '.', '2', '.', '.', '3', '.', '.', '.', '.' } };

		Sudoku2 s2 = new Sudoku2();
		Assert.assertFalse(s2.sudoku2(grid));

	}

	@Test
	public void testSudoku7() {
	  char[][] grid = { { '.', '4', '.', '.', '.', '.', '.', '.', '.' },
						{ '.', '.', '4', '.', '.', '.', '.', '.', '.' }, 
						{ '.', '.', '.', '1', '.', '.', '7', '.', '.' },
						{ '.', '.', '.', '.', '.', '.', '.', '.', '.' }, 
						{ '.', '.', '.', '3', '.', '.', '.', '6', '.' },
						{ '.', '.', '.', '.', '.', '6', '.', '9', '.' }, 
						{ '.', '.', '.', '.', '1', '.', '.', '.', '.' },
						{ '.', '.', '.', '.', '.', '.', '2', '.', '.' }, 
						{ '.', '.', '.', '8', '.', '.', '.', '.', '.' } };

		Sudoku2 s2 = new Sudoku2();
		Assert.assertFalse(s2.sudoku2(grid));

	}

	/**
	 * test conversion of ASCII char numbers to int
	 */
	@Test
	public void testSudoku_c() {
		char c = '9';
		Assert.assertEquals(8, c - 49);
	}

}
